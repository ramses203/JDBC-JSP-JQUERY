1. memo 란 테이블 만들기
// 메모장
// 데이터의 구분자 PK -> num
// 메모내용 -> mcont -> v2(200)
// 작성자 -> mwrite -> v2(24)
// 작성날짜 -> date
// 아이피 -> mip -> v2(30)
// 메모장 시퀀스 -> num 할당

2. DTO 클래스 만들기: 값을 저장하고 전달하는 객체 
3. DAO 클래스 만들기 : DB작업을 위한 클래스 -> DTO 사용해서 값을 전달
4. Datasource: DB접속 대행 객체 (Connection을 반환 받는다.Tomcat이 관리하는
CP에서)
5. context.xml을 작성한다. 
6. JNDI의 기법으로 Datasource를 얻어 와서 실제 커넥션을 획득하는 클래스를 정의
클래스 이름은 MYconn

7. Connection test하기
-------------------------------------------------
7-1. DAO에서 JDBC작업하기
입력메서드 정의해보기 : 인자값으로 DTO값을 전달한다. 
public void addMemo(MemoDTO vo){
//입력작업 실행
}

출력메서드 정의해보기 : 메서드가 호출되면 아래에 쿼리문이 호출되어서 나온 결과물에 값을 하나씩 vo객체에
저장하면서 동시에 ArrayList에 추가한 후 그 값을 반환하는 메서드를 정의

public ArrayList<MemoDTO> write(int no){
return null;
}

연습하기 : 이름과 나이를 입력받아서 적당한 문자열로 변환해주는 메서드
public String add(String name, int age){
return name+age;
} 

연습하기2: 몸무게 소수점자리까지 + 나이 입력받아서 동의 할꺼냐 안할꺼냐
public boolean info(double weight, int age){
return true;
}

연습하기3: 다음 아래의 메서드를 리팩토링해라

public boolean addTest(Bank bk){
return true;
}
class Bank{
private String msg;
private int pay;
private boolean agr;

public 
}
-------------------------------------------------------------------------
7-2. DAO에서 JDBC작업하기 2
1. Connection 반환하기
2. SQL문 작성하기
3. preparedstatement생성하기
4. Insert, update, delete 일 경우에 메서드로 전달받은 값을 바인딩하기
5. excuteUpdate
6. 자원해제하기



7-2. DAO에서 JDBC작업하기 2
1. Connection 반환하기
2. SQL문 작성하기
3. preparedstatement생성하기
4. ResultSet 생성하기
5. select 일 경우에 메서드로 전달받은 값을 바인딩하기
6. excuteQuery
7. while 문으로 커서 반복하기
8. 자원해제하기









